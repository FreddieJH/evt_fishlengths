---
title: "Statistical methods for estimating the maximum body length of fish species" 
format: 
  html: 
    theme: minty 
    editor: visual 
    execute: 
    echo: false 
    warning: false 
    error: false 
    message: false 
    cache: true
    fig-width: 8
    fig-asp: 0.65
    fig-align: center
    bibliography: references.bib 
---

```{r}
# install.packages("pacman")
pacman::p_load(
    tidyverse, 
    furrr, 
    data.table, 
    truncnorm,
    evd,
    scales,
    geomtextpath,
    multidplyr,
    parallel,
    cmdstanr,
    patchwork,
    posterior
    )

source("R/01_simulation.R")
source("R/02_functions.R")
source("R/05_finitesample.R")

save_figures <- FALSE
```

# Background

n = sample size k = number of samples mu = location parameter of truncated normal distribution sigma = variance parameter of truncated normal distribution

# Concept

```{r}

set.seed(1)
concept_population <- rtruncnorm(n = 10000, a = 0, mean = 50, sd = 16)
concept_population_pdf <- 
    tibble(size = 0:150) %>% 
    mutate(p = dtruncnorm(size, a = 0, mean = 50, sd = 16))
concept_maxima <- concept_population %>% get_sample_maxima(n = 50, k = 6) 
concept_gev_fit <- concept_maxima %>% sample_gev()

concept_population_pdf_fit <- 
    tibble(size = 0:150) %>% 
    mutate(p = dtruncnorm(size, a = 0, mean = 49, sd = 14),
           p_lwr = dtruncnorm(size, a = 0, mean = 49, sd = 16),  # Wider SD for lower bound
           p_upr = dtruncnorm(size, a = 0, mean = 49, sd = 12))  # Narrower SD for upper bound



concept_underlying <- 
    ggplot(concept_population_pdf) +
  geom_line(aes(x = size, y = p), linewidth = 1) +
  labs(x = "Body Size (cm)", y = "Density") +
  theme_minimal(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())



generate_sample <- function(n) {
  
}

all_samples <- lapply(1:num_samples, function(i) {
  sample_data <- rtruncnorm(50, a = 0, mean = 50, sd = 16)
  data.frame(
    sample_id = i,
    value = sample_data,
    is_max = sample_data == max(sample_data)
  )
})

samples_df <- do.call(rbind, all_samples)

concept_samples <- 
  ggplot(samples_df, aes(x = value)) +
  geom_dotplot(aes(fill = is_max), 
               binpositions = "all", 
               dotsize = 2, 
               binwidth = 3) +
  scale_fill_manual(values = c("FALSE" = "transparent", "TRUE" = "purple")) +
  facet_wrap(~ sample_id, nrow = 2, labeller = labeller(sample_id = function(value) {paste0("Sample #", value)})) +
  labs(x = "Body Size (cm)", y = "Count") +
  theme_classic(base_size = 20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

concept_efs <- 
    concept_population_pdf_fit %>% 
    ggplot() +
    geom_ribbon(aes(x = size, ymin = p_lwr, ymax = p_upr), fill = "pink", alpha = 0.3) + 
  geom_line(aes(x = size, y = p), linewidth = 2, lty = "solid", col = "pink") +
  geom_point(data = max_df, aes(x = max_value, y = 0), col= "black", fill = "purple", size = 7, pch = 21) +
  labs(x = "Body Size (cm)", y = "Density") +
  theme_classic(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

concept_fitted_gev <- evd::fgev(concept_maxima)

concept_gev_preds <- tibble(size = 0:150) %>% 
mutate(p = evd::dgev(size, loc = concept_fitted_gev$estimate["loc"],
scale = concept_fitted_gev$estimate["scale"],
shape = concept_fitted_gev$estimate["shape"]))

# Create Figure 4: Distribution of maxima with density fit
concept_evt <- 
ggplot() +
geom_dotplot(aes(x = concept_maxima),
  dotsize = 2,
  binwidth = 3, stackgroups = TRUE, fill = "purple",
  ) +
  geom_line(aes(x = size, y = p), linewidth = 1, color = "orange", data = concept_gev_preds, inherit.aes = FALSE) +
  labs(x = "Maximum Body Size (cm)", y = "Density") +
    scale_x_continuous(limit = c(0, 150)) +
    scale_y_continuous(limit = c(0, 0.15)) +
   theme_classic(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

layout <- "
AB
CD
"

concept_plot <- 
    concept_underlying + 
    concept_samples +
 concept_efs + 
 concept_evt + 
 plot_layout(design = layout)
 
if(save_figures){
   ggsave(
    filename = "output/figures/p_concept.png",
    plot = concept_plot,
    height = 10,
    width = 10
) 
}

```

# Simulation

```{r}
scenarios <-
    expand_grid(
        k = c(3, 5, 10, 20, 30, 50, 100, 200),
        n_lambda = c(100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000),
        mu = seq(20, 120, by = 20),
    ) |>
    mutate(
        sigma = mu * 0.34,
        min_size = 0,
        filename = paste0(
            "k", k,
            "_lambda", n_lambda,
            "_mu", mu
        )
    )

scenarios_maxima <- simulate_maxima(scenarios)
```

# Single scenario

## Single simulation example

```{r}

single_k <- 10
single_lambda <- 2000
single_mu <- 60
single_sigma <- single_mu*0.34

scenario1 <-
    scenarios_maxima %>%
    filter(k == single_k, n_lambda == single_lambda, mu == single_mu)

scenario1_maxima <- scenario1$maxvals
scenario1_n <- scenario1$sim_n

# expected maximum based on 100 samples, each of length 2000 (total is 100*2000 samples)
scenario1_max100 <- efs_expected_max(n = 100*single_lambda, mu = single_mu, sigma = single_sigma)
```

## EVT (single)

```{r}
# Fit EVT model
evt_results <- fit_maxima_model(
    maxima = scenario1_maxima,
    model_path = "models/evt.stan"
)

evt_cdf_posterior <-
    evt_results$draws %>%
    expand_grid(size = 0:180) %>%
    mutate(cdf = pmap_dbl(
        .l = list(q = size, loc = mu, scale = sigma, shape = xi),
        .f = pgev
    )) %>%
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

evt_max_posterior <-
    evt_results$draws %>%
    mutate(
        max = pmap_dbl(
            .l = list(k = length(scenario1_maxima), loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(k = 100, loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        )
    )


scenario1_evt_max <- quantile(evt_max_posterior$max, 0.5)
scenario1_evt_max_lwr <- quantile(evt_max_posterior$max, 0.025)
scenario1_evt_max_upr <- quantile(evt_max_posterior$max, 0.975)
scenario1_evt_max100 <- quantile(evt_max_posterior$max100, 0.5)
scenario1_evt_max100_lwr <- quantile(evt_max_posterior$max100, 0.025)
scenario1_evt_max100_upr <- quantile(evt_max_posterior$max100, 0.975)

```

## Exact finite-sample (single)

```{r}
# Fit finite-sample model
efs_results <- fit_maxima_model(
  maxima = scenario1_maxima,
  model_path = "models/efs.stan"
)

efs_cdf_posterior <-
    efs_results$draws %>%
    expand_grid(size = 0:180) %>%
    mutate(cdf = pmap_dbl(
        .l = list(x = size, n = lambda, mu = mu, sigma = sigma),
        .f = F_n_x
    )) %>%
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

efs_max_posterior <-
    efs_results$draws %>%
    mutate(
        max = pmap_dbl(
            .l = list(n = length(scenario1_maxima)*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(n = 100*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        )
    )

efs_results$draws %>% rename_with(~ paste0("est_", .x), setdiff(names(.), c(".chain", ".iteration", ".draw")))
scenario1_efs_max <- quantile(efs_max_posterior$max, 0.5)
scenario1_efs_max_lwr <- quantile(efs_max_posterior$max, 0.025)
scenario1_efs_max_upr <- quantile(efs_max_posterior$max, 0.975)
scenario1_efs_max100 <- quantile(efs_max_posterior$max100, 0.5)
scenario1_efs_max100_lwr <- quantile(efs_max_posterior$max100, 0.025)
scenario1_efs_max100_upr <- quantile(efs_max_posterior$max100, 0.975)

```

## Plotting single scenario

```{r}

p_single_underlying <-
    ggplot() +
    geom_textdensity(aes(x), data = tibble(x = rtruncnorm(1e6, a = 0, mean = single_mu, sd = single_sigma)), 
                     label = "Observable body size distribution", 
                     hjust = 0.5) +
    geom_rug(aes(x = scenario1_maxima), color = "purple", length = unit(0.5, units = "cm")) +
    geom_point(aes(x = scenario1_max100, y = 0), size = 4) +
    geom_rect(aes(
        xmin = scenario1_evt_max100_lwr,
        xmax = scenario1_evt_max100_upr, ymin = -Inf, ymax = Inf
    ), fill = "orange", alpha = 0.3) +
    geom_rect(aes(
        xmin = scenario1_efs_max100_lwr,
        xmax = scenario1_efs_max100_upr, ymin = -Inf, ymax = Inf
    ), fill = "pink", alpha = 0.3) +
    geom_textvline(aes(xintercept = scenario1_efs_max100),
        color = "#f66b6b", linetype = "dashed",
        label = as.character(expression(L[paste(max, ", ", 100)])),
        parse = TRUE, size = 5
    ) +
    geom_textvline(aes(xintercept = scenario1_evt_max100),
        color = "orange", linetype = "dashed",
        label = as.character(expression(L[paste(max, ", ", 100)])),
        parse = TRUE, size = 5
    ) +
    labs(x = "Fish body length (cm)", y = NULL) +
    theme_minimal(20) +
    theme(axis.text.y = element_blank(),
    axis.ticks.y = element_blank()) +
    scale_x_continuous(breaks=seq(40,150,20), expand = c(0,1)) +
    coord_cartesian(xlim = c(60, 180))

p1_lims <- layer_scales(p_single_underlying)$x$range$range

scenario1_plotting <-
    scenario1 %>%
    mutate(plotting_pos = rank(scenario1_maxima) / (max(rank(scenario1_maxima)) + 1))

plot_modfit <- function(posterior, colour, data_colour = "purple"){
        ggplot(posterior) +
    geom_ribbon(aes(x = size, ymin = p_lwr, ymax = p_upr), fill = colour, alpha = 0.3) +
    geom_point(aes(x = scenario1_maxima, y = plotting_pos, size = sim_n), data = scenario1_plotting, color = data_colour) +
    geom_line(aes(x = size, y = p_fit), col = colour, linewidth = 1.5) +
    geom_errorbarh(aes(xmin = scenario1_efs_max100_lwr, xmax = scenario1_efs_max100_upr, y = 0.99), height = 0.03, col = "black", lty = "solid", 
    data = tibble(n = 1)) +
    geom_vline(xintercept = scenario1_efs_max100, col = colour, lty = "dashed") +
    labs(x = "Fish body length (cm)", y = "Pr(Lmax < size)", size = "Sample size") +
    theme_minimal(20) +
    theme(legend.position = "inside", legend.position.inside = c(0.05, 1), legend.justification = c(0, 1.2), legend.background = element_rect(fill = "white", color = "black"))+
    scale_x_continuous(breaks=seq(40,150,20), expand = c(0,1)) +
    coord_cartesian(xlim = c(60, 180))
}

p_single_evt <-  plot_modfit(evt_cdf_posterior, colour = "orange")
p_single_efs <- plot_modfit(efs_cdf_posterior, colour = "pink")

p_examplefit <-
    p_single_underlying +
    p_single_evt +
    p_single_efs +
    plot_layout(ncol = 1, axis_titles = "collect") +
    plot_annotation(tag_levels = "A")

if(save_figures){
   ggsave(
    filename = "output/figures/p_examplefit.png",
    plot = p_examplefit,
    height = 12,
    width = 10
) 
}
```

# Sensitivity analysis

## 'True' values

```{r}

scenarios_truemax <-
    scenarios %>%
    mutate(true_max = pmap_dbl(.l = list(n = k*n_lambda, mu=mu, sigma=sigma), 
    .f = efs_expected_max), 
    true_max100 = pmap_dbl(.l = list(n = 100*n_lambda, mu=mu, sigma=sigma), 
    .f = efs_expected_max))
    
```

## Fitting to all scenarios

```{r}
evt_posteriors <- multiple_mod_fits("evt")
efs_posteriors <- multiple_mod_fits("efs")

evt_posteriors_summary <-summarise_posterior(evt_posteriors)
efs_posteriors_summary <-summarise_posterior(efs_posteriors)
        
```

## Plotting multiple fits

```{r}

p_simulation_bias <- 
    bind_rows(evt_posteriors_summary %>% mutate(type = "evt"), 
        efs_posteriors_summary %>% mutate(type = "efs")) %>% 
    left_join(expand_grid(scenarios_truemax, type = c("evt", "efs"))) %>% 
    filter(n_lambda %in% c(100, 1000, 10000)) %>% 
    ggplot(aes(max, true_max, col = as.factor(k))) +
    geom_abline(slope = 1) +
    geom_point() +
    geom_errorbarh(aes(xmin = max_lwr, xmax = max_upr)) +
    facet_grid(n_lambda ~ type, scales = "free", 
               labeller = labeller(
                   type = c(evt = "Extreme value theory", efs = "Exact finite-sample"),
                   n_lambda = function(x) paste0("n = ", x)
               )) +
    theme_minimal(20) +
    theme(
        panel.border = element_rect(color = "black", fill = NA, linewidth = 1), 
        legend.position = "bottom",
        legend.direction = "horizontal" 
    ) +
    guides(color = guide_legend(override.aes = list(size = 5), nrow = 1)) + 
    labs(
        x = expression("Estimated "~L[max]~ "(cm)"),
        y = expression("True " ~ L[max]~ "(cm)"),
        color = "# samples (k):"
    ) 

ggsave(
    filename = "output/figures/p_simulation_bias.png",
    plot = p_simulation_bias,
    height = 10,
    width = 7
)
```


```{r}

p_simulation_bias_k100 <- 
    bind_rows(evt_posteriors_summary %>% mutate(type = "evt"), 
        efs_posteriors_summary %>% mutate(type = "efs")) %>% 
    left_join(expand_grid(scenarios_truemax, type = c("evt", "efs"))) %>% 
    filter(n_lambda %in% c(100, 1000, 10000)) %>% 
    ggplot(aes(max100, true_max100, col = as.factor(k))) +
    geom_abline(slope = 1) +
    geom_point() +
    geom_errorbarh(aes(xmin = max100_lwr, xmax = max100_upr)) +
    facet_grid(n_lambda ~ type, scales = "free", 
               labeller = labeller(
                   type = c(evt = "Extreme value theory", efs = "Exact finite-sample"),
                   n_lambda = function(x) paste0("n = ", x)
               )) +
    theme_minimal(20) +
    theme(
        panel.border = element_rect(color = "black", fill = NA, linewidth = 1), 
        legend.position = "bottom",
        legend.direction = "horizontal" 
    ) +
    guides(color = guide_legend(override.aes = list(size = 5), nrow = 1)) + 
    labs(
        x = expression("Estimated "~L[max100]~ "(cm)"),
        y = expression("True " ~ L[max100]~ "(cm)"),
        color = "# samples (k):"
    ) 

ggsave(
    filename = "output/figures/p_simulation_bias_k100.png",
    plot = p_simulation_bias_k100,
    height = 10,
    width = 7
)
```

## Real data

```{r}
kg2cm <- function(w, a = 0.04478, b = 2.673) ((w * 1000) / a)^(1 / b)

snapper_maxima <- tibble(
    type = c(
        rep("length", 8),
        rep("weight", 4)
    ),
    max = c(
        91.3, 102, 112, 107, 107, 99.2, 95, 82.2,
        kg2cm(c(11.8, 18.4, 16.5, 17.2))
    )
)
```

## EVT Model fitting (snapper)

```{r}

evt_snapper_fit <- fit_maxima_model(
    maxima = snapper_maxima$max,
    model_path = "models/evt.stan"
)


evt_cdf_posterior_snapper <-
    evt_snapper_fit$draws %>%
    expand_grid(size = 0:200) %>%
    mutate(cdf = pmap_dbl(
        .l = list(q = size, loc = mu, scale = sigma, shape = xi),
        .f = pgev
    )) %>%
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

evt_max_posterior_snapper <-
    evt_snapper_fit$draws %>%
    mutate(
        max = pmap_dbl(
            .l = list(k = length(scenario1_maxima), loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(k = 100, loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        )
    )


snapper_evt_max <- quantile(evt_max_posterior_snapper$max, 0.5)
snapper_evt_max_lwr <- quantile(evt_max_posterior_snapper$max, 0.025)
snapper_evt_max_upr <- quantile(evt_max_posterior_snapper$max, 0.975)
snapper_evt_max100 <- quantile(evt_max_posterior_snapper$max100, 0.5)
snapper_evt_max100_lwr <- quantile(evt_max_posterior_snapper$max100, 0.025)
snapper_evt_max100_upr <- quantile(evt_max_posterior_snapper$max100, 0.975)


```


```{r}
efs_snapper_fit <- fit_maxima_model(
    maxima = snapper_maxima$max,
    model_path = "models/efs.stan"
)
efs_cdf_posterior <-
    efs_snapper_fit$draws %>%
    expand_grid(size = 0:200) %>%
    mutate(cdf = pmap_dbl(
        .l = list(x = size, n = lambda, mu = mu, sigma = sigma),
        .f = F_n_x
    )) %>%
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

efs_max_posterior_snapper <-
    efs_results$draws %>%
    mutate(
        max = pmap_dbl(
            .l = list(n = length(scenario1_maxima)*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(n = 100*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        )
    )


snapper_efs_max <- quantile(efs_max_posterior_snapper$max, 0.5)
snapper_efs_max_lwr <- quantile(efs_max_posterior_snapper$max, 0.025)
snapper_efs_max_upr <- quantile(efs_max_posterior_snapper$max, 0.975)
snapper_efs_max100 <- quantile(efs_max_posterior_snapper$max100, 0.5)
snapper_efs_max100_lwr <- quantile(efs_max_posterior_snapper$max100, 0.025)
snapper_efs_max100_upr <- quantile(efs_max_posterior_snapper$max100, 0.975)


```


```{r}
p_snapper <- 
efs_cdf_posterior %>%
    mutate(mod = "efs") %>% 
    bind_rows(evt_cdf_posterior %>%
    mutate(mod = "evt")) %>% 
    ggplot(aes(size, p_fit, col = mod)) +
    geom_vline(xintercept = snapper_efs_max100, col = "pink") +
    geom_vline(xintercept = snapper_evt_max100, col = "orange") +
    geom_vline(xintercept = snapper_efs_max100_lwr, col = "pink", lty = 2) +
    geom_vline(xintercept = snapper_evt_max100_lwr, col = "orange", lty = 2) +
    geom_vline(xintercept = snapper_efs_max100_upr, col = "pink", lty = 2) +
    geom_vline(xintercept = snapper_evt_max100_upr, col = "orange", lty = 2) +
    geom_ribbon(aes(ymin = p_lwr, ymax = p_upr, fill = mod),
        alpha = 0.3, col = "transparent"
    ) +
    geom_line(linewidth = 1.5) +
    scale_x_continuous(label = scales::label_number(suffix = "cm")) +
    theme_classic(20) +
    geom_rug(aes(x = maxima),
        data = tibble(maxima = snapper_maxima$max),
        col = "purple",
        inherit.aes = FALSE
    ) +
    
    labs(
        x = "Body length, x",
        y = "Pr(x > Lmax)"
    ) +
    scale_color_manual(values = c("evt" = "orange", "efs" = "pink")) +
    scale_fill_manual(values = c("evt" = "orange", "efs" = "pink")) +
    theme(legend.position = "none")


if(save_figures){
   ggsave(
    filename = "output/figures/p_snapper.png",
    plot = p_snapper,
    height = 8,
    width = 10
) 
}
```