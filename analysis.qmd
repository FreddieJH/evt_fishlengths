---
title: "Statistical methods for estimating the maximum body length of fish species" 
format: 
  html: 
    theme: minty 
    editor: visual 
    execute: 
    echo: false 
    warning: false 
    error: false 
    message: false 
    cache: true
    fig-width: 8
    fig-asp: 0.65
    fig-align: center
    bibliography: references.bib 
---

```{r}
# install.packages("pacman")
pacman::p_load(
    tidyverse, 
    furrr, 
    data.table, 
    truncnorm,
    evd,
    scales,
    geomtextpath,
    multidplyr,
    parallel,
    cmdstanr,
    patchwork,
    posterior
    )

source("R/01_sim_functions.R")
source("R/05_expectedmax_functions.R")
source("R/04_model_functions.R")

save_figures <- FALSE
```

# Background

n = sample size k = number of samples mu = location parameter of truncated normal distribution sigma = variance parameter of truncated normal distribution

# Concept

```{r}

set.seed(1)
concept_population <- rtruncnorm(n = 10000, a = 0, mean = 50, sd = 16)
concept_population_pdf <- 
    tibble(size = 0:150) |> 
    mutate(p = dtruncnorm(size, a = 0, mean = 50, sd = 16))
concept_maxima <- concept_population |> get_sample_maxima(n = 50, k = 6) 
concept_gev_fit <- concept_maxima |> sample_gev()

concept_population_pdf_fit <- 
    tibble(size = 0:150) |> 
    mutate(p = dtruncnorm(size, a = 0, mean = 49, sd = 14),
           p_lwr = dtruncnorm(size, a = 0, mean = 49, sd = 16),  # Wider SD for lower bound
           p_upr = dtruncnorm(size, a = 0, mean = 49, sd = 12))  # Narrower SD for upper bound

concept_underlying <- 
    ggplot(concept_population_pdf) +
  geom_line(aes(x = size, y = p), linewidth = 1) +
  labs(x = "Body Size (cm)", y = "Density") +
  theme_minimal(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())


all_samples <- lapply(1:num_samples, function(i) {
  sample_data <- rtruncnorm(50, a = 0, mean = 50, sd = 16)
  data.frame(
    sample_id = i,
    value = sample_data,
    is_max = sample_data == max(sample_data)
  )
})

samples_df <- do.call(rbind, all_samples)

concept_samples <- 
  ggplot(samples_df, aes(x = value)) +
  geom_dotplot(aes(fill = is_max), 
               binpositions = "all", 
               dotsize = 2, 
               binwidth = 3) +
  scale_fill_manual(values = c("FALSE" = "transparent", "TRUE" = "purple")) +
  facet_wrap(~ sample_id, nrow = 2, labeller = labeller(sample_id = function(value) {paste0("Sample #", value)})) +
  labs(x = "Body Size (cm)", y = "Count") +
  theme_classic(base_size = 20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

concept_efs <- 
    concept_population_pdf_fit |> 
    ggplot() +
    geom_ribbon(aes(x = size, ymin = p_lwr, ymax = p_upr), fill = "pink", alpha = 0.3) + 
  geom_line(aes(x = size, y = p), linewidth = 2, lty = "solid", col = "pink") +
  geom_point(data = max_df, aes(x = max_value, y = 0), col= "black", fill = "purple", size = 7, pch = 21) +
  labs(x = "Body Size (cm)", y = "Density") +
  theme_classic(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

concept_fitted_gev <- evd::fgev(concept_maxima)

concept_gev_preds <- tibble(size = 0:150) |> 
mutate(p = evd::dgev(size, loc = concept_fitted_gev$estimate["loc"],
scale = concept_fitted_gev$estimate["scale"],
shape = concept_fitted_gev$estimate["shape"]))

# Create Figure 4: Distribution of maxima with density fit
concept_evt <- 
ggplot() +
geom_dotplot(aes(x = concept_maxima),
  dotsize = 2,
  binwidth = 3, stackgroups = TRUE, fill = "purple",
  ) +
  geom_line(aes(x = size, y = p), linewidth = 1, color = "orange", data = concept_gev_preds, inherit.aes = FALSE) +
  labs(x = "Maximum Body Size (cm)", y = "Density") +
    scale_x_continuous(limit = c(0, 150)) +
    scale_y_continuous(limit = c(0, 0.15)) +
   theme_classic(20) +
  theme(legend.position = "none", axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_blank())

layout <- "
AB
CD
"

concept_plot <- 
    concept_underlying + 
    concept_samples +
 concept_efs + 
 concept_evt + 
 plot_layout(design = layout)
 
if(save_figures){
   ggsave(
    filename = "output/figures/p_concept.png",
    plot = concept_plot,
    height = 10,
    width = 10
) 
}

```

# Simulation

The underlying distribution will be based upon its mean and variance. This will allow for a direct comparison between the underlying distributions being tested.

```{r}

scenarios <-
  expand_grid(
    k = c(5, 10, 50, 100, 200),
    n_lambda = c(100, 1000, 10000),
    mean = c(10, 50, 100),
    dist = c("tnorm", "lnorm", "gamma")
  ) |>
  mutate(
    variance = (mean * 0.34)^2,
    min_size = 0,
    filename = paste0(
      "k", k,
      "_lambda", n_lambda,
      "_mean", mean, 
      "_", dist
    )
  )

scenarios_maxima <- 
 scenarios |>
      mutate(max_tbl = pmap(
        .l = list(
          k = k,
          lambda = n_lambda,
          mean = mean,
          variance = variance, 
          dist = dist
        ),
        .f = simulate_max_anydist
      )) |>
      mutate(
        sim_n = map(.x = max_tbl, .f = function(.x) .x$n),
        maxvals = map(.x = max_tbl, .f = function(.x) .x$max),
        k_i = map(k, seq_len)
      ) |>
      select(-max_tbl) |>
      unnest(cols = c(sim_n, maxvals, k_i))

```

# Single scenario

## Single simulation example

```{r}

single_k <- 10
single_lambda <- 1000
single_mean <- 50
single_variance <- (single_mean*0.34)^2

scenario1 <-
    scenarios_maxima |>
    filter(k == single_k, n_lambda == single_lambda, mean == single_mean, dist == "tnorm")

scenario1_maxima <- scenario1$maxvals
scenario1_n <- scenario1$sim_n

# expected maximum based on 100 samples, each of length 2000 (total is 100*2000 samples)
scenario1_max100 <- expected_max_fromsim(dist = "tnorm", n = 100*single_lambda, mean = single_mean, variance = single_variance)

```

## EVT (single)

```{r}
# Fit EVT model
evt_results <- fit_maxima_model(
    maxima = scenario1_maxima,
    type = "evt"
)

evt_cdf_posterior <-
    evt_results$draws |>
    expand_grid(size = 0:180) |>
    mutate(cdf = pmap_dbl(
        .l = list(q = size, loc = mu, scale = sigma, shape = xi),
        .f = pgev
    )) |>
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

evt_max_posterior <-
    evt_results$draws |>
    mutate(
        max = pmap_dbl(
            .l = list(k = length(scenario1_maxima), loc = mu, scale = sigma, shape = xi),
            .f = expected_max_evt
        ),
        max100 = pmap_dbl(
            .l = list(k = 100, loc = mu, scale = sigma, shape = xi),
            .f = expected_max_evt

        )
    )


scenario1_evt_max <- quantile(evt_max_posterior$max, 0.5)
scenario1_evt_max_lwr <- quantile(evt_max_posterior$max, 0.025)
scenario1_evt_max_upr <- quantile(evt_max_posterior$max, 0.975)
scenario1_evt_max100 <- quantile(evt_max_posterior$max100, 0.5)
scenario1_evt_max100_lwr <- quantile(evt_max_posterior$max100, 0.025)
scenario1_evt_max100_upr <- quantile(evt_max_posterior$max100, 0.975)

```

## Exact finite-sample (single)

```{r}
# Fit finite-sample model
efs_results <- fit_maxima_model(
  maxima = scenario1_maxima,
  type = "efs", gamma_shape = 2, gamma_rate = 0.1
)

efs_cdf_posterior <-
    efs_results$draws |>
    expand_grid(size = 0:180) |>
    mutate(cdf = pmap_dbl(
        .l = list(x = size, distr = "tnorm", n = lambda, par1 = mu, par2 = sigma),
        .f = cdf_max
    )) |>
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

efs_max_posterior <-
    efs_results$draws |>
    mutate(
        max = pmap_dbl(
            .l = list(distr = "tnorm", n = length(scenario1_maxima)*lambda, par1 = mu, par2 = sigma),
            .f = expected_max
        ),
        max100 = pmap_dbl(
            .l = list(distr = "tnorm", n = 100*lambda, par1 = mu, par2 = sigma),
            .f = expected_max
        )
    )

# efs_results$draws |> rename_with(~ paste0("est_", .x), !all_of(c(".chain", ".iteration", ".draw")))
scenario1_efs_max <- quantile(efs_max_posterior$max, 0.5)
scenario1_efs_max_lwr <- quantile(efs_max_posterior$max, 0.025)
scenario1_efs_max_upr <- quantile(efs_max_posterior$max, 0.975)
scenario1_efs_max100 <- quantile(efs_max_posterior$max100, 0.5)
scenario1_efs_max100_lwr <- quantile(efs_max_posterior$max100, 0.025)
scenario1_efs_max100_upr <- quantile(efs_max_posterior$max100, 0.975)

```

## Plotting single scenario

```{r}

p_single_underlying <-
    ggplot() +
    geom_textdensity(aes(x), data = tibble(x = rtruncnorm(1e6, a = 0, mean = single_mean, sd = sqrt(single_variance))), 
                     label = "Observable body size distribution", 
                     hjust = 0.5) +
    geom_rug(aes(x = scenario1_maxima), color = "purple", length = unit(0.5, units = "cm")) +
    geom_point(aes(x = scenario1_max100, y = 0), size = 4) +
    geom_rect(aes(
        xmin = scenario1_evt_max100_lwr,
        xmax = scenario1_evt_max100_upr, ymin = -Inf, ymax = Inf
    ), fill = "orange", alpha = 0.3) +
    geom_rect(aes(
        xmin = scenario1_efs_max100_lwr,
        xmax = scenario1_efs_max100_upr, ymin = -Inf, ymax = Inf
    ), fill = "pink", alpha = 0.3) +
    geom_textvline(aes(xintercept = scenario1_efs_max100),
        color = "#f66b6b", linetype = "dashed",
        label = as.character(expression(L[paste(max, ", ", 100)])),
        parse = TRUE, size = 5
    ) +
    geom_textvline(aes(xintercept = scenario1_evt_max100),
        color = "orange", linetype = "dashed",
        label = as.character(expression(L[paste(max, ", ", 100)])),
        parse = TRUE, size = 5
    ) +
    labs(x = "Fish body length (cm)", y = NULL) +
    theme_minimal(20) +
    theme(axis.text.y = element_blank(),
    axis.ticks.y = element_blank()) +
    scale_x_continuous(breaks=seq(40,150,20), expand = c(0,1)) +
    coord_cartesian(xlim = c(60, 180))

p1_lims <- layer_scales(p_single_underlying)$x$range$range

scenario1_plotting <-
    scenario1 |>
    mutate(plotting_pos = rank(scenario1_maxima) / (max(rank(scenario1_maxima)) + 1))

plot_modfit <- function(type, colour, data_colour = "purple"){

        posterior <-get(paste0(type,"_cdf_posterior")) 
    est_max100_fit <- get(paste0("scenario1_", type,"_max100"))
    est_max100_lwr <- get(paste0("scenario1_", type,"_max100_lwr"))
    est_max100_upr <- get(paste0("scenario1_", type,"_max100_upr"))

    ggplot(posterior) +
    geom_ribbon(aes(x = size, ymin = p_lwr, ymax = p_upr), fill = colour, alpha = 0.3) +
    geom_point(aes(x = scenario1_maxima, y = plotting_pos, size = sim_n), data = scenario1_plotting, color = data_colour) +
    geom_line(aes(x = size, y = p_fit), col = colour, linewidth = 1.5) +
    geom_errorbarh(aes(xmin = est_max100_lwr, xmax = est_max100_upr, y = 0.99), 
    height = 0.03, col = "black", lty = "solid", 
    data = tibble(n = 1)) +
    geom_vline(xintercept = est_max100_fit, col = colour, lty = "dashed") +
    labs(x = "Fish body length (cm)", y = "Pr(Lmax < size)", size = "Sample size") +
    theme_minimal(20) +
    theme(legend.position = "inside", legend.position.inside = c(0.05, 1), legend.justification = c(0, 1.2), legend.background = element_rect(fill = "white", color = "black"))+
    scale_x_continuous(breaks=seq(40,150,20), expand = c(0,1)) +
    coord_cartesian(xlim = c(60, 180))
}

p_single_evt <-  plot_modfit(type = "evt", colour = "orange")
p_single_efs <- plot_modfit(type = "efs", colour = "pink")

p_examplefit <-
    p_single_underlying +
    p_single_evt +
    p_single_efs +
    plot_layout(ncol = 1, axis_titles = "collect") +
    plot_annotation(tag_levels = "A")

if(save_figures){
   ggsave(
    filename = "output/figures/p_examplefit.png",
    plot = p_examplefit,
    height = 12,
    width = 10
) 
}
```

# Sensitivity analysis

## 'True' values

```{r}

scenarios_truemax <-
    scenarios |>
    mutate(
        true_max = pmap_dbl(
            .l = list(distr = dist, n = k*n_lambda, mean = mean, variance = variance),
            .f = expected_max_fromsim
        ),
        true_max100 = pmap_dbl(
            .l = list(distr = dist, n = 100*n_lambda, mean = mean, variance = variance),
            .f = expected_max_fromsim
        )
    )
    
```

## Fitting to all scenarios

```{r}

evt_posteriors <- multiple_mod_fits("evt")
efs_posteriors <- multiple_mod_fits("efs")

evt_posteriors_summary <-summarise_posterior(evt_posteriors)
efs_posteriors_summary <-summarise_posterior(efs_posteriors)
        
```

## Plotting multiple fits

```{r}

for(selected_dist  in c("tnorm", "gamma", "lnorm")){

p_simulation_bias <- 
    bind_rows(evt_posteriors_summary |> mutate(type = "evt"), 
        efs_posteriors_summary |> mutate(type = "efs")) |> 
    left_join(expand_grid(scenarios_truemax, type = c("evt", "efs"))) |> 
    filter(n_lambda %in% c(100, 1000, 10000)) |> 
    filter(dist == selected_dist) |> 
    ggplot(aes(max, true_max, col = as.factor(k))) +
    geom_abline(slope = 1) +
    geom_point() +
    geom_errorbarh(aes(xmin = max_lwr, xmax = max_upr)) +
    facet_grid(n_lambda ~ type, scales = "free", 
               labeller = labeller(
                   type = c(evt = "Extreme value theory", efs = "Exact finite-sample"),
                   n_lambda = function(x) paste0("n = ", x)
               )) +
    theme_minimal(20) +
    # scale_x_log10() +
    # scale_y_log10() + 
    theme(
        panel.border = element_rect(color = "black", fill = NA, linewidth = 1), 
        legend.position = "bottom",
        legend.direction = "horizontal", 
        plot.background = element_rect(fill = "white") 
    ) +
    guides(color = guide_legend(override.aes = list(size = 5), nrow = 1)) + 
    labs(
        x = expression("Estimated "~L[max]~ "(cm)"),
        y = expression("True " ~ L[max]~ "(cm)"),
        color = "# samples (k):"
    ) 
ggsave(
    filename = paste0("output/figures/p_simulation_bias_", selected_dist,"3.png"),
    plot = p_simulation_bias,
    height = 10,
    width = 7
)

}

"output/figures/p_simulation_bias_", selected_dist,".png" prior = gamma(50, 0.1)
"output/figures/p_simulation_bias_", selected_dist,"2.png" prior = gamma(2, 0.01)
"output/figures/p_simulation_bias_", selected_dist,"3.png" prior = gamma(20, 0.001)


```


# Multiple maxima per sample

## Simulated data

I will use the same scenario dataset but I will take a random number of maxima from each sample (m). This random sample will be a uniform distribution between 1 and 5. 

```{r}
scenarios 


scenarios_maxima <- 
 scenarios |>
      mutate(max_tbl = pmap(
        .l = list(
          k = k,
          lambda = n_lambda,
          mean = mean,
          variance = variance, 
          dist = dist
        ),
        .f = simulate_multimax_anydist
      )) |>
      mutate(
        sim_n = map(.x = max_tbl, .f = function(.x) .x$sample_size),
        maxvals = map(.x = max_tbl, .f = function(.x) .x$maxvals),
        m_i =  map(.x = max_tbl, .f = function(.x) .x$m_i)
      ) |>
      select(-max_tbl) |>
      unnest(cols = c(sim_n, maxvals, m_i))


    scenarios |>
    filter(k == single_k, n_lambda == single_lambda, mean == single_mean, dist == "tnorm") %>% 
            mutate(max_tbl = pmap(
        .l = list(
          k = k,
          lambda = n_lambda,
          mean = mean,
          variance = variance, 
          dist = dist
        ),
        .f = simulate_multimax_anydist
      )) |>
      mutate(
        n_k = map_dbl(.x = max_tbl, .f = function(.x) .x$n_k),
        maxvals = map(.x = max_tbl, .f = function(.x) .x$maxvals),
        m_k =  map_dbl(.x = max_tbl, .f = function(.x) .x$m_k) # START FROM HERE --- NOT WORKING
      ) |>
      select(-max_tbl) |>
      unnest(cols = c(sim_n, maxvals, m_i))

scenarios_maxima %>% 
    mutate(m = max(m_i), .by = filename) %>% view()
        k <- length(unique(sim_results$sample_id))
  
  # Count total fish observations
  total_fish <- nrow(sim_results)
  
  # Count number of maxima in each sample
  m <- sim_results %>%
    dplyr::group_by(sample_id) %>%
    dplyr::summarise(count = n()) %>%
    dplyr::pull(count)
  
  # Extract sample_id for each observation
  # Note: Stan uses 1-indexed arrays, so we ensure sample_ids start from 1
  sample_id <- sim_results$sample_id
  
  # Extract fish sizes
  x <- sim_results$value
  
  # Create list in Stan format
  stan_data <- list(
    k = k,
    total_fish = total_fish,
    m = m,
    sample_id = sample_id,
    x = x
  )

```

```{r}

stan_data <- list(
  k = length(unique(fish_data$sample_id)),
  total_fish = nrow(fish_data),
  m = fish_data %>% 
    group_by(sample_id) %>% 
    summarise(count = n()) %>% 
    pull(count),
  sample_id = fish_data$sample_id,
  x = fish_data$size
)

# Fit the model
fit <- stan(model_code = stan_model, data = stan_data, 
            iter = 2000, chains = 4, cores = 4)

# Extract and summarise parameters
summary(fit)$summary %>% 
  as_tibble(rownames = "parameter") %>%
  filter(parameter %in% c("mu", "sigma", "lambda"))
```


```{r}

p_simulation_bias_k100 <- 
    bind_rows(evt_posteriors_summary |> mutate(type = "evt"), 
        efs_posteriors_summary |> mutate(type = "efs")) |> 
    left_join(expand_grid(scenarios_truemax, type = c("evt", "efs"))) |> 
    filter(n_lambda %in% c(100, 1000, 10000)) |> 
    ggplot(aes(max100, true_max100, col = as.factor(k))) +
    geom_abline(slope = 1) +
    geom_point() +
    geom_errorbarh(aes(xmin = max100_lwr, xmax = max100_upr)) +
    facet_grid(n_lambda ~ type, scales = "free", 
               labeller = labeller(
                   type = c(evt = "Extreme value theory", efs = "Exact finite-sample"),
                   n_lambda = function(x) paste0("n = ", x)
               )) +
    theme_minimal(20) +
    theme(
        panel.border = element_rect(color = "black", fill = NA, linewidth = 1), 
        legend.position = "bottom",
        legend.direction = "horizontal" 
    ) +
    guides(color = guide_legend(override.aes = list(size = 5), nrow = 1)) + 
    labs(
        x = expression("Estimated "~L[max100]~ "(cm)"),
        y = expression("True " ~ L[max100]~ "(cm)"),
        color = "# samples (k):"
    ) 

ggsave(
    filename = "output/figures/p_simulation_bias_k100.png",
    plot = p_simulation_bias_k100,
    height = 10,
    width = 7
)
```

### Understanding the systematic bias

```{r}

gamma_prior_scenarios <- tibble(
    scenario = c(
        "High mean, high variance",
        "Low mean, low variance",
        "High mean, low variance",
        "Low mean, high variance"
    ),
    target_mean = c(8000, 2000, 8000, 2000),
    target_variance = c(4000000, 500000, 1000000, 4000000)
) %>%
    mutate(
        shape = (target_mean^2) / target_variance,
        rate = target_mean / target_variance
    ) %>% mutate(label = paste0("gamma(", shape, ",", rate, ")"))

for(i in 1:4){
    if(i==1)efs_posteriors_list <- list()
  gamma_shape <- gamma_prior_scenarios$shape[i]
  gamma_rate <- gamma_prior_scenarios$rate[i]
  efs_posteriors_list[[i]] <- 
  multiple_mod_fits("efs", gamma_shape = gamma_shape, gamma_rate = gamma_rate) %>% 
  mutate(gamma_shape =gamma_shape, gamma_rate = gamma_rate)
}



# Create a function to summarise a single posterior element
summarise_single_posterior <- function(posterior_tbl, scenario_name) {
  posterior_tbl %>% 
    summarise(
      across(
        c(est_mu, est_sigma, est_lambda, est_max, est_max100),
        list(
          fit = median,
          lwr = ~ quantile(.x, 0.025),
          upr = ~ quantile(.x, 0.975)
        )
      ),
      .by = filename
    ) %>%
    mutate(scenario = scenario_name)  
}

efs_posteriors_summary <- bind_rows(
  map2(
    efs_posteriors_list,
    gamma_prior_scenarios$scenario,
    summarise_single_posterior
  )
) %>% 
left_join(gamma_prior_scenarios)


```

```{r}

for(selected_dist  in c("tnorm", "gamma", "lnorm")){

p_simulation_bias <- 
   efs_posteriors_summary |> 
   left_join(scenarios) %>% 
   left_join(scenarios_truemax) %>% 
    filter(dist == selected_dist) |>
    ggplot(aes(x = est_max_fit, y = true_max/est_max_fit, col = as.factor(k))) +
    geom_abline(slope = 1) +
    geom_point() +
    geom_errorbarh(aes(xmin = est_max_lwr, xmax = est_max_upr)) +
    facet_grid(n_lambda ~ label, scales = "free", 
               labeller = labeller(
                   n_lambda = function(x) paste0("n = ", x)
               )) +
    theme_minimal(20) +
    # scale_x_log10() +
    # scale_y_log10() + 
    theme(
        panel.border = element_rect(color = "black", fill = NA, linewidth = 1), 
        legend.position = "bottom",
        legend.direction = "horizontal", 
        plot.background = element_rect(fill = "white") 
    ) +
    guides(color = guide_legend(override.aes = list(size = 5), nrow = 1)) + 
    labs(
        x = expression("Estimated "~L[max]~ "(cm)"),
        y = expression("True " ~ L[max]~ "/EstimatedLMAX (cm)"),
        color = "# samples (k):"
    ) 
ggsave(
    filename = paste0("output/figures/p_simulation_bias_", selected_dist,"relative.png"),
    plot = p_simulation_bias,
    height = 10,
    width = 15
)

}
```

## Real data

```{r}
kg2cm <- function(w, a = 0.04478, b = 2.673) ((w * 1000) / a)^(1 / b)

snapper_maxima <- tibble(
    type = c(
        rep("length", 8),
        rep("weight", 4)
    ),
    max = c(
        91.3, 102, 112, 107, 107, 99.2, 95, 82.2,
        kg2cm(c(11.8, 18.4, 16.5, 17.2))
    )
)
```

## EVT Model fitting (snapper)

```{r}

evt_snapper_fit <- fit_maxima_model(
    maxima = snapper_maxima$max,
    model_path = "models/evt.stan"
)


evt_cdf_posterior_snapper <-
    evt_snapper_fit$draws |>
    expand_grid(size = 0:200) |>
    mutate(cdf = pmap_dbl(
        .l = list(q = size, loc = mu, scale = sigma, shape = xi),
        .f = pgev
    )) |>
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

evt_max_posterior_snapper <-
    evt_snapper_fit$draws |>
    mutate(
        max = pmap_dbl(
            .l = list(k = length(scenario1_maxima), loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(k = 100, loc = mu, scale = sigma, shape = xi),
            .f = evt_expected_max
        )
    )


snapper_evt_max <- quantile(evt_max_posterior_snapper$max, 0.5)
snapper_evt_max_lwr <- quantile(evt_max_posterior_snapper$max, 0.025)
snapper_evt_max_upr <- quantile(evt_max_posterior_snapper$max, 0.975)
snapper_evt_max100 <- quantile(evt_max_posterior_snapper$max100, 0.5)
snapper_evt_max100_lwr <- quantile(evt_max_posterior_snapper$max100, 0.025)
snapper_evt_max100_upr <- quantile(evt_max_posterior_snapper$max100, 0.975)


```

```{r}
efs_snapper_fit <- fit_maxima_model(
    maxima = snapper_maxima$max,
    model_path = "models/efs.stan"
)
efs_cdf_posterior <-
    efs_snapper_fit$draws |>
    expand_grid(size = 0:200) |>
    mutate(cdf = pmap_dbl(
        .l = list(x = size, n = lambda, mu = mu, sigma = sigma),
        .f = F_n_x
    )) |>
    summarise(
        p_fit = mean(cdf),
        p_lwr = quantile(cdf, 0.025),
        p_upr = quantile(cdf, 0.975),
        .by = size
    )

efs_max_posterior_snapper <-
    efs_results$draws |>
    mutate(
        max = pmap_dbl(
            .l = list(n = length(scenario1_maxima)*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        ),
        max100 = pmap_dbl(
            .l = list(n = 100*lambda, mu = mu, sigma = sigma),
            .f = efs_expected_max
        )
    )


snapper_efs_max <- quantile(efs_max_posterior_snapper$max, 0.5)
snapper_efs_max_lwr <- quantile(efs_max_posterior_snapper$max, 0.025)
snapper_efs_max_upr <- quantile(efs_max_posterior_snapper$max, 0.975)
snapper_efs_max100 <- quantile(efs_max_posterior_snapper$max100, 0.5)
snapper_efs_max100_lwr <- quantile(efs_max_posterior_snapper$max100, 0.025)
snapper_efs_max100_upr <- quantile(efs_max_posterior_snapper$max100, 0.975)


```

```{r}
p_snapper <- 
efs_cdf_posterior |>
    mutate(mod = "efs") |> 
    bind_rows(evt_cdf_posterior |>
    mutate(mod = "evt")) |> 
    ggplot(aes(size, p_fit, col = mod)) +
    geom_vline(xintercept = snapper_efs_max100, col = "pink") +
    geom_vline(xintercept = snapper_evt_max100, col = "orange") +
    geom_vline(xintercept = snapper_efs_max100_lwr, col = "pink", lty = 2) +
    geom_vline(xintercept = snapper_evt_max100_lwr, col = "orange", lty = 2) +
    geom_vline(xintercept = snapper_efs_max100_upr, col = "pink", lty = 2) +
    geom_vline(xintercept = snapper_evt_max100_upr, col = "orange", lty = 2) +
    geom_ribbon(aes(ymin = p_lwr, ymax = p_upr, fill = mod),
        alpha = 0.3, col = "transparent"
    ) +
    geom_line(linewidth = 1.5) +
    scale_x_continuous(label = scales::label_number(suffix = "cm")) +
    theme_classic(20) +
    geom_rug(aes(x = maxima),
        data = tibble(maxima = snapper_maxima$max),
        col = "purple",
        inherit.aes = FALSE
    ) +
    
    labs(
        x = "Body length, x",
        y = "Pr(x > Lmax)"
    ) +
    scale_color_manual(values = c("evt" = "orange", "efs" = "pink")) +
    scale_fill_manual(values = c("evt" = "orange", "efs" = "pink")) +
    theme(legend.position = "none")


if(save_figures){
   ggsave(
    filename = "output/figures/p_snapper.png",
    plot = p_snapper,
    height = 8,
    width = 10
) 
}
```